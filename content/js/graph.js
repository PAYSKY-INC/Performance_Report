/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 23.0, "minX": 0.0, "maxY": 1875.0, "series": [{"data": [[0.0, 23.0], [0.1, 33.0], [0.2, 53.0], [0.3, 53.0], [0.4, 56.0], [0.5, 56.0], [0.6, 56.0], [0.7, 57.0], [0.8, 62.0], [0.9, 69.0], [1.0, 73.0], [1.1, 84.0], [1.2, 84.0], [1.3, 89.0], [1.4, 89.0], [1.5, 94.0], [1.6, 103.0], [1.7, 107.0], [1.8, 108.0], [1.9, 112.0], [2.0, 134.0], [2.1, 134.0], [2.2, 134.0], [2.3, 135.0], [2.4, 136.0], [2.5, 140.0], [2.6, 141.0], [2.7, 150.0], [2.8, 150.0], [2.9, 156.0], [3.0, 157.0], [3.1, 159.0], [3.2, 165.0], [3.3, 166.0], [3.4, 168.0], [3.5, 174.0], [3.6, 175.0], [3.7, 176.0], [3.8, 200.0], [3.9, 202.0], [4.0, 203.0], [4.1, 219.0], [4.2, 221.0], [4.3, 229.0], [4.4, 234.0], [4.5, 240.0], [4.6, 244.0], [4.7, 253.0], [4.8, 253.0], [4.9, 270.0], [5.0, 270.0], [5.1, 277.0], [5.2, 278.0], [5.3, 283.0], [5.4, 283.0], [5.5, 283.0], [5.6, 284.0], [5.7, 291.0], [5.8, 296.0], [5.9, 298.0], [6.0, 298.0], [6.1, 307.0], [6.2, 313.0], [6.3, 316.0], [6.4, 320.0], [6.5, 321.0], [6.6, 326.0], [6.7, 331.0], [6.8, 333.0], [6.9, 335.0], [7.0, 336.0], [7.1, 337.0], [7.2, 340.0], [7.3, 342.0], [7.4, 346.0], [7.5, 349.0], [7.6, 356.0], [7.7, 357.0], [7.8, 358.0], [7.9, 360.0], [8.0, 362.0], [8.1, 364.0], [8.2, 365.0], [8.3, 366.0], [8.4, 367.0], [8.5, 369.0], [8.6, 371.0], [8.7, 373.0], [8.8, 377.0], [8.9, 380.0], [9.0, 384.0], [9.1, 384.0], [9.2, 386.0], [9.3, 388.0], [9.4, 388.0], [9.5, 388.0], [9.6, 390.0], [9.7, 395.0], [9.8, 401.0], [9.9, 402.0], [10.0, 404.0], [10.1, 407.0], [10.2, 408.0], [10.3, 408.0], [10.4, 409.0], [10.5, 409.0], [10.6, 410.0], [10.7, 412.0], [10.8, 416.0], [10.9, 419.0], [11.0, 424.0], [11.1, 425.0], [11.2, 427.0], [11.3, 432.0], [11.4, 435.0], [11.5, 439.0], [11.6, 440.0], [11.7, 440.0], [11.8, 442.0], [11.9, 444.0], [12.0, 445.0], [12.1, 446.0], [12.2, 446.0], [12.3, 450.0], [12.4, 451.0], [12.5, 451.0], [12.6, 453.0], [12.7, 454.0], [12.8, 460.0], [12.9, 460.0], [13.0, 460.0], [13.1, 462.0], [13.2, 464.0], [13.3, 465.0], [13.4, 466.0], [13.5, 467.0], [13.6, 467.0], [13.7, 468.0], [13.8, 471.0], [13.9, 472.0], [14.0, 473.0], [14.1, 480.0], [14.2, 481.0], [14.3, 481.0], [14.4, 485.0], [14.5, 487.0], [14.6, 490.0], [14.7, 490.0], [14.8, 498.0], [14.9, 502.0], [15.0, 502.0], [15.1, 502.0], [15.2, 503.0], [15.3, 503.0], [15.4, 506.0], [15.5, 507.0], [15.6, 508.0], [15.7, 510.0], [15.8, 511.0], [15.9, 512.0], [16.0, 514.0], [16.1, 516.0], [16.2, 517.0], [16.3, 520.0], [16.4, 522.0], [16.5, 526.0], [16.6, 527.0], [16.7, 528.0], [16.8, 529.0], [16.9, 529.0], [17.0, 530.0], [17.1, 539.0], [17.2, 541.0], [17.3, 543.0], [17.4, 548.0], [17.5, 553.0], [17.6, 557.0], [17.7, 559.0], [17.8, 560.0], [17.9, 564.0], [18.0, 568.0], [18.1, 568.0], [18.2, 572.0], [18.3, 572.0], [18.4, 574.0], [18.5, 577.0], [18.6, 578.0], [18.7, 580.0], [18.8, 583.0], [18.9, 587.0], [19.0, 590.0], [19.1, 591.0], [19.2, 591.0], [19.3, 592.0], [19.4, 595.0], [19.5, 595.0], [19.6, 596.0], [19.7, 599.0], [19.8, 600.0], [19.9, 600.0], [20.0, 601.0], [20.1, 602.0], [20.2, 602.0], [20.3, 602.0], [20.4, 603.0], [20.5, 604.0], [20.6, 604.0], [20.7, 605.0], [20.8, 605.0], [20.9, 607.0], [21.0, 610.0], [21.1, 611.0], [21.2, 614.0], [21.3, 615.0], [21.4, 616.0], [21.5, 617.0], [21.6, 620.0], [21.7, 620.0], [21.8, 623.0], [21.9, 625.0], [22.0, 625.0], [22.1, 626.0], [22.2, 628.0], [22.3, 631.0], [22.4, 634.0], [22.5, 636.0], [22.6, 637.0], [22.7, 639.0], [22.8, 640.0], [22.9, 641.0], [23.0, 643.0], [23.1, 643.0], [23.2, 644.0], [23.3, 645.0], [23.4, 647.0], [23.5, 648.0], [23.6, 651.0], [23.7, 651.0], [23.8, 655.0], [23.9, 659.0], [24.0, 660.0], [24.1, 665.0], [24.2, 667.0], [24.3, 672.0], [24.4, 676.0], [24.5, 678.0], [24.6, 678.0], [24.7, 678.0], [24.8, 679.0], [24.9, 680.0], [25.0, 681.0], [25.1, 682.0], [25.2, 684.0], [25.3, 684.0], [25.4, 685.0], [25.5, 686.0], [25.6, 688.0], [25.7, 692.0], [25.8, 694.0], [25.9, 695.0], [26.0, 696.0], [26.1, 696.0], [26.2, 696.0], [26.3, 697.0], [26.4, 698.0], [26.5, 702.0], [26.6, 703.0], [26.7, 707.0], [26.8, 708.0], [26.9, 708.0], [27.0, 712.0], [27.1, 713.0], [27.2, 713.0], [27.3, 716.0], [27.4, 716.0], [27.5, 722.0], [27.6, 722.0], [27.7, 722.0], [27.8, 725.0], [27.9, 726.0], [28.0, 728.0], [28.1, 729.0], [28.2, 729.0], [28.3, 730.0], [28.4, 731.0], [28.5, 731.0], [28.6, 733.0], [28.7, 737.0], [28.8, 737.0], [28.9, 739.0], [29.0, 748.0], [29.1, 748.0], [29.2, 749.0], [29.3, 752.0], [29.4, 752.0], [29.5, 754.0], [29.6, 755.0], [29.7, 755.0], [29.8, 755.0], [29.9, 756.0], [30.0, 759.0], [30.1, 760.0], [30.2, 760.0], [30.3, 760.0], [30.4, 762.0], [30.5, 763.0], [30.6, 763.0], [30.7, 764.0], [30.8, 764.0], [30.9, 764.0], [31.0, 767.0], [31.1, 768.0], [31.2, 768.0], [31.3, 769.0], [31.4, 770.0], [31.5, 770.0], [31.6, 772.0], [31.7, 773.0], [31.8, 777.0], [31.9, 778.0], [32.0, 779.0], [32.1, 780.0], [32.2, 781.0], [32.3, 781.0], [32.4, 793.0], [32.5, 794.0], [32.6, 795.0], [32.7, 795.0], [32.8, 796.0], [32.9, 796.0], [33.0, 798.0], [33.1, 799.0], [33.2, 799.0], [33.3, 800.0], [33.4, 801.0], [33.5, 802.0], [33.6, 802.0], [33.7, 803.0], [33.8, 803.0], [33.9, 803.0], [34.0, 806.0], [34.1, 806.0], [34.2, 807.0], [34.3, 807.0], [34.4, 807.0], [34.5, 809.0], [34.6, 809.0], [34.7, 809.0], [34.8, 810.0], [34.9, 810.0], [35.0, 811.0], [35.1, 815.0], [35.2, 817.0], [35.3, 818.0], [35.4, 819.0], [35.5, 819.0], [35.6, 820.0], [35.7, 821.0], [35.8, 823.0], [35.9, 826.0], [36.0, 827.0], [36.1, 827.0], [36.2, 829.0], [36.3, 829.0], [36.4, 831.0], [36.5, 834.0], [36.6, 835.0], [36.7, 837.0], [36.8, 838.0], [36.9, 841.0], [37.0, 841.0], [37.1, 841.0], [37.2, 843.0], [37.3, 843.0], [37.4, 844.0], [37.5, 845.0], [37.6, 846.0], [37.7, 848.0], [37.8, 849.0], [37.9, 850.0], [38.0, 851.0], [38.1, 852.0], [38.2, 854.0], [38.3, 856.0], [38.4, 858.0], [38.5, 861.0], [38.6, 861.0], [38.7, 862.0], [38.8, 862.0], [38.9, 862.0], [39.0, 863.0], [39.1, 864.0], [39.2, 865.0], [39.3, 866.0], [39.4, 869.0], [39.5, 870.0], [39.6, 871.0], [39.7, 871.0], [39.8, 873.0], [39.9, 874.0], [40.0, 874.0], [40.1, 875.0], [40.2, 876.0], [40.3, 877.0], [40.4, 880.0], [40.5, 881.0], [40.6, 881.0], [40.7, 883.0], [40.8, 883.0], [40.9, 883.0], [41.0, 884.0], [41.1, 885.0], [41.2, 885.0], [41.3, 888.0], [41.4, 889.0], [41.5, 890.0], [41.6, 891.0], [41.7, 893.0], [41.8, 894.0], [41.9, 895.0], [42.0, 895.0], [42.1, 898.0], [42.2, 898.0], [42.3, 898.0], [42.4, 899.0], [42.5, 902.0], [42.6, 905.0], [42.7, 906.0], [42.8, 906.0], [42.9, 906.0], [43.0, 908.0], [43.1, 909.0], [43.2, 911.0], [43.3, 913.0], [43.4, 913.0], [43.5, 913.0], [43.6, 915.0], [43.7, 916.0], [43.8, 916.0], [43.9, 924.0], [44.0, 925.0], [44.1, 927.0], [44.2, 932.0], [44.3, 934.0], [44.4, 935.0], [44.5, 936.0], [44.6, 936.0], [44.7, 937.0], [44.8, 937.0], [44.9, 941.0], [45.0, 943.0], [45.1, 945.0], [45.2, 946.0], [45.3, 947.0], [45.4, 947.0], [45.5, 947.0], [45.6, 947.0], [45.7, 948.0], [45.8, 949.0], [45.9, 952.0], [46.0, 954.0], [46.1, 954.0], [46.2, 958.0], [46.3, 960.0], [46.4, 963.0], [46.5, 966.0], [46.6, 967.0], [46.7, 968.0], [46.8, 968.0], [46.9, 969.0], [47.0, 969.0], [47.1, 969.0], [47.2, 969.0], [47.3, 972.0], [47.4, 973.0], [47.5, 974.0], [47.6, 975.0], [47.7, 976.0], [47.8, 976.0], [47.9, 980.0], [48.0, 982.0], [48.1, 983.0], [48.2, 983.0], [48.3, 986.0], [48.4, 986.0], [48.5, 988.0], [48.6, 991.0], [48.7, 994.0], [48.8, 996.0], [48.9, 999.0], [49.0, 999.0], [49.1, 1000.0], [49.2, 1002.0], [49.3, 1006.0], [49.4, 1006.0], [49.5, 1007.0], [49.6, 1008.0], [49.7, 1009.0], [49.8, 1010.0], [49.9, 1011.0], [50.0, 1013.0], [50.1, 1015.0], [50.2, 1016.0], [50.3, 1016.0], [50.4, 1019.0], [50.5, 1019.0], [50.6, 1020.0], [50.7, 1021.0], [50.8, 1022.0], [50.9, 1023.0], [51.0, 1023.0], [51.1, 1024.0], [51.2, 1025.0], [51.3, 1025.0], [51.4, 1025.0], [51.5, 1028.0], [51.6, 1031.0], [51.7, 1034.0], [51.8, 1034.0], [51.9, 1036.0], [52.0, 1039.0], [52.1, 1044.0], [52.2, 1046.0], [52.3, 1047.0], [52.4, 1049.0], [52.5, 1049.0], [52.6, 1050.0], [52.7, 1052.0], [52.8, 1053.0], [52.9, 1055.0], [53.0, 1055.0], [53.1, 1056.0], [53.2, 1057.0], [53.3, 1058.0], [53.4, 1061.0], [53.5, 1061.0], [53.6, 1063.0], [53.7, 1068.0], [53.8, 1069.0], [53.9, 1070.0], [54.0, 1070.0], [54.1, 1071.0], [54.2, 1073.0], [54.3, 1075.0], [54.4, 1076.0], [54.5, 1078.0], [54.6, 1080.0], [54.7, 1081.0], [54.8, 1083.0], [54.9, 1085.0], [55.0, 1085.0], [55.1, 1085.0], [55.2, 1092.0], [55.3, 1094.0], [55.4, 1099.0], [55.5, 1099.0], [55.6, 1100.0], [55.7, 1101.0], [55.8, 1101.0], [55.9, 1102.0], [56.0, 1104.0], [56.1, 1106.0], [56.2, 1107.0], [56.3, 1108.0], [56.4, 1109.0], [56.5, 1111.0], [56.6, 1112.0], [56.7, 1115.0], [56.8, 1117.0], [56.9, 1119.0], [57.0, 1120.0], [57.1, 1120.0], [57.2, 1122.0], [57.3, 1122.0], [57.4, 1126.0], [57.5, 1127.0], [57.6, 1127.0], [57.7, 1128.0], [57.8, 1133.0], [57.9, 1133.0], [58.0, 1133.0], [58.1, 1133.0], [58.2, 1137.0], [58.3, 1141.0], [58.4, 1142.0], [58.5, 1142.0], [58.6, 1143.0], [58.7, 1146.0], [58.8, 1150.0], [58.9, 1151.0], [59.0, 1154.0], [59.1, 1159.0], [59.2, 1160.0], [59.3, 1162.0], [59.4, 1164.0], [59.5, 1164.0], [59.6, 1164.0], [59.7, 1165.0], [59.8, 1166.0], [59.9, 1166.0], [60.0, 1166.0], [60.1, 1169.0], [60.2, 1169.0], [60.3, 1170.0], [60.4, 1171.0], [60.5, 1171.0], [60.6, 1171.0], [60.7, 1171.0], [60.8, 1173.0], [60.9, 1175.0], [61.0, 1175.0], [61.1, 1178.0], [61.2, 1178.0], [61.3, 1180.0], [61.4, 1180.0], [61.5, 1180.0], [61.6, 1181.0], [61.7, 1181.0], [61.8, 1184.0], [61.9, 1187.0], [62.0, 1187.0], [62.1, 1194.0], [62.2, 1196.0], [62.3, 1199.0], [62.4, 1200.0], [62.5, 1202.0], [62.6, 1202.0], [62.7, 1202.0], [62.8, 1205.0], [62.9, 1208.0], [63.0, 1209.0], [63.1, 1210.0], [63.2, 1211.0], [63.3, 1216.0], [63.4, 1216.0], [63.5, 1217.0], [63.6, 1219.0], [63.7, 1223.0], [63.8, 1224.0], [63.9, 1225.0], [64.0, 1227.0], [64.1, 1229.0], [64.2, 1230.0], [64.3, 1231.0], [64.4, 1233.0], [64.5, 1233.0], [64.6, 1234.0], [64.7, 1236.0], [64.8, 1238.0], [64.9, 1238.0], [65.0, 1240.0], [65.1, 1242.0], [65.2, 1243.0], [65.3, 1244.0], [65.4, 1246.0], [65.5, 1250.0], [65.6, 1252.0], [65.7, 1253.0], [65.8, 1255.0], [65.9, 1256.0], [66.0, 1256.0], [66.1, 1258.0], [66.2, 1258.0], [66.3, 1261.0], [66.4, 1262.0], [66.5, 1264.0], [66.6, 1268.0], [66.7, 1269.0], [66.8, 1270.0], [66.9, 1271.0], [67.0, 1271.0], [67.1, 1278.0], [67.2, 1278.0], [67.3, 1280.0], [67.4, 1280.0], [67.5, 1281.0], [67.6, 1282.0], [67.7, 1283.0], [67.8, 1284.0], [67.9, 1287.0], [68.0, 1289.0], [68.1, 1290.0], [68.2, 1295.0], [68.3, 1295.0], [68.4, 1295.0], [68.5, 1299.0], [68.6, 1301.0], [68.7, 1301.0], [68.8, 1301.0], [68.9, 1304.0], [69.0, 1304.0], [69.1, 1307.0], [69.2, 1309.0], [69.3, 1309.0], [69.4, 1309.0], [69.5, 1314.0], [69.6, 1315.0], [69.7, 1315.0], [69.8, 1316.0], [69.9, 1318.0], [70.0, 1319.0], [70.1, 1321.0], [70.2, 1322.0], [70.3, 1323.0], [70.4, 1324.0], [70.5, 1327.0], [70.6, 1329.0], [70.7, 1330.0], [70.8, 1331.0], [70.9, 1333.0], [71.0, 1334.0], [71.1, 1335.0], [71.2, 1336.0], [71.3, 1337.0], [71.4, 1343.0], [71.5, 1344.0], [71.6, 1346.0], [71.7, 1348.0], [71.8, 1351.0], [71.9, 1353.0], [72.0, 1353.0], [72.1, 1355.0], [72.2, 1356.0], [72.3, 1360.0], [72.4, 1360.0], [72.5, 1364.0], [72.6, 1365.0], [72.7, 1369.0], [72.8, 1369.0], [72.9, 1370.0], [73.0, 1370.0], [73.1, 1372.0], [73.2, 1373.0], [73.3, 1375.0], [73.4, 1377.0], [73.5, 1378.0], [73.6, 1378.0], [73.7, 1379.0], [73.8, 1379.0], [73.9, 1380.0], [74.0, 1381.0], [74.1, 1383.0], [74.2, 1383.0], [74.3, 1386.0], [74.4, 1388.0], [74.5, 1389.0], [74.6, 1390.0], [74.7, 1391.0], [74.8, 1391.0], [74.9, 1392.0], [75.0, 1392.0], [75.1, 1392.0], [75.2, 1393.0], [75.3, 1394.0], [75.4, 1395.0], [75.5, 1396.0], [75.6, 1396.0], [75.7, 1397.0], [75.8, 1397.0], [75.9, 1399.0], [76.0, 1400.0], [76.1, 1400.0], [76.2, 1404.0], [76.3, 1407.0], [76.4, 1407.0], [76.5, 1409.0], [76.6, 1410.0], [76.7, 1412.0], [76.8, 1413.0], [76.9, 1415.0], [77.0, 1415.0], [77.1, 1417.0], [77.2, 1417.0], [77.3, 1418.0], [77.4, 1419.0], [77.5, 1421.0], [77.6, 1422.0], [77.7, 1428.0], [77.8, 1430.0], [77.9, 1431.0], [78.0, 1433.0], [78.1, 1436.0], [78.2, 1437.0], [78.3, 1439.0], [78.4, 1443.0], [78.5, 1444.0], [78.6, 1449.0], [78.7, 1450.0], [78.8, 1450.0], [78.9, 1451.0], [79.0, 1453.0], [79.1, 1456.0], [79.2, 1462.0], [79.3, 1470.0], [79.4, 1473.0], [79.5, 1474.0], [79.6, 1477.0], [79.7, 1478.0], [79.8, 1483.0], [79.9, 1487.0], [80.0, 1488.0], [80.1, 1491.0], [80.2, 1494.0], [80.3, 1497.0], [80.4, 1498.0], [80.5, 1502.0], [80.6, 1504.0], [80.7, 1510.0], [80.8, 1510.0], [80.9, 1513.0], [81.0, 1513.0], [81.1, 1514.0], [81.2, 1516.0], [81.3, 1520.0], [81.4, 1525.0], [81.5, 1531.0], [81.6, 1533.0], [81.7, 1536.0], [81.8, 1537.0], [81.9, 1539.0], [82.0, 1541.0], [82.1, 1544.0], [82.2, 1545.0], [82.3, 1546.0], [82.4, 1549.0], [82.5, 1552.0], [82.6, 1553.0], [82.7, 1553.0], [82.8, 1556.0], [82.9, 1557.0], [83.0, 1558.0], [83.1, 1558.0], [83.2, 1563.0], [83.3, 1564.0], [83.4, 1565.0], [83.5, 1567.0], [83.6, 1569.0], [83.7, 1572.0], [83.8, 1573.0], [83.9, 1574.0], [84.0, 1575.0], [84.1, 1576.0], [84.2, 1576.0], [84.3, 1579.0], [84.4, 1581.0], [84.5, 1582.0], [84.6, 1585.0], [84.7, 1585.0], [84.8, 1586.0], [84.9, 1590.0], [85.0, 1593.0], [85.1, 1594.0], [85.2, 1595.0], [85.3, 1596.0], [85.4, 1600.0], [85.5, 1600.0], [85.6, 1601.0], [85.7, 1602.0], [85.8, 1603.0], [85.9, 1609.0], [86.0, 1613.0], [86.1, 1616.0], [86.2, 1617.0], [86.3, 1619.0], [86.4, 1620.0], [86.5, 1620.0], [86.6, 1620.0], [86.7, 1626.0], [86.8, 1626.0], [86.9, 1627.0], [87.0, 1632.0], [87.1, 1634.0], [87.2, 1635.0], [87.3, 1635.0], [87.4, 1640.0], [87.5, 1643.0], [87.6, 1643.0], [87.7, 1643.0], [87.8, 1646.0], [87.9, 1647.0], [88.0, 1650.0], [88.1, 1654.0], [88.2, 1655.0], [88.3, 1659.0], [88.4, 1659.0], [88.5, 1661.0], [88.6, 1661.0], [88.7, 1662.0], [88.8, 1665.0], [88.9, 1666.0], [89.0, 1668.0], [89.1, 1669.0], [89.2, 1674.0], [89.3, 1676.0], [89.4, 1678.0], [89.5, 1678.0], [89.6, 1681.0], [89.7, 1684.0], [89.8, 1684.0], [89.9, 1685.0], [90.0, 1685.0], [90.1, 1685.0], [90.2, 1689.0], [90.3, 1689.0], [90.4, 1691.0], [90.5, 1695.0], [90.6, 1695.0], [90.7, 1701.0], [90.8, 1702.0], [90.9, 1702.0], [91.0, 1704.0], [91.1, 1707.0], [91.2, 1709.0], [91.3, 1716.0], [91.4, 1719.0], [91.5, 1721.0], [91.6, 1721.0], [91.7, 1722.0], [91.8, 1722.0], [91.9, 1725.0], [92.0, 1725.0], [92.1, 1725.0], [92.2, 1726.0], [92.3, 1732.0], [92.4, 1732.0], [92.5, 1733.0], [92.6, 1735.0], [92.7, 1735.0], [92.8, 1740.0], [92.9, 1742.0], [93.0, 1742.0], [93.1, 1743.0], [93.2, 1743.0], [93.3, 1748.0], [93.4, 1753.0], [93.5, 1753.0], [93.6, 1756.0], [93.7, 1758.0], [93.8, 1760.0], [93.9, 1761.0], [94.0, 1763.0], [94.1, 1765.0], [94.2, 1766.0], [94.3, 1768.0], [94.4, 1768.0], [94.5, 1770.0], [94.6, 1771.0], [94.7, 1773.0], [94.8, 1774.0], [94.9, 1777.0], [95.0, 1782.0], [95.1, 1786.0], [95.2, 1787.0], [95.3, 1789.0], [95.4, 1796.0], [95.5, 1798.0], [95.6, 1801.0], [95.7, 1804.0], [95.8, 1805.0], [95.9, 1806.0], [96.0, 1806.0], [96.1, 1807.0], [96.2, 1811.0], [96.3, 1813.0], [96.4, 1813.0], [96.5, 1814.0], [96.6, 1815.0], [96.7, 1816.0], [96.8, 1818.0], [96.9, 1819.0], [97.0, 1819.0], [97.1, 1819.0], [97.2, 1825.0], [97.3, 1826.0], [97.4, 1826.0], [97.5, 1827.0], [97.6, 1829.0], [97.7, 1833.0], [97.8, 1834.0], [97.9, 1835.0], [98.0, 1836.0], [98.1, 1842.0], [98.2, 1842.0], [98.3, 1842.0], [98.4, 1847.0], [98.5, 1848.0], [98.6, 1849.0], [98.7, 1850.0], [98.8, 1854.0], [98.9, 1855.0], [99.0, 1857.0], [99.1, 1858.0], [99.2, 1859.0], [99.3, 1862.0], [99.4, 1863.0], [99.5, 1866.0], [99.6, 1869.0], [99.7, 1871.0], [99.8, 1874.0], [99.9, 1875.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 15.0, "minX": 0.0, "maxY": 92.0, "series": [{"data": [[0.0, 15.0], [600.0, 67.0], [700.0, 68.0], [200.0, 24.0], [800.0, 92.0], [900.0, 66.0], [1000.0, 65.0], [1100.0, 68.0], [300.0, 37.0], [1200.0, 62.0], [1300.0, 74.0], [1400.0, 46.0], [1500.0, 49.0], [100.0, 22.0], [400.0, 51.0], [1600.0, 53.0], [1700.0, 49.0], [1800.0, 44.0], [500.0, 48.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 149.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 656.0, "series": [{"data": [[0.0, 149.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 656.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 195.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 231.1279826464208, "minX": 1.72708368E12, "maxY": 520.196660482375, "series": [{"data": [[1.72708368E12, 520.196660482375], [1.72708374E12, 231.1279826464208]], "isOverall": false, "label": "Cube Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72708374E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 33.0, "minX": 1.0, "maxY": 1875.0, "series": [{"data": [[2.0, 1874.0], [3.0, 1871.0], [4.0, 1866.0], [5.0, 1869.0], [6.0, 1863.0], [7.0, 1862.0], [8.0, 1858.0], [9.0, 1859.0], [10.0, 1857.0], [11.0, 1855.0], [12.0, 1854.0], [13.0, 1849.0], [14.0, 1850.0], [16.0, 1847.5], [17.0, 1842.0], [18.0, 1842.0], [19.0, 1842.0], [20.0, 1836.0], [21.0, 1835.0], [22.0, 1834.0], [23.0, 1833.0], [24.0, 1829.0], [25.0, 1827.0], [26.0, 1826.0], [27.0, 924.0], [28.0, 1826.0], [29.0, 1819.0], [30.0, 1819.0], [33.0, 1814.0], [32.0, 1818.5], [35.0, 1813.0], [34.0, 1815.0], [36.0, 33.0], [37.0, 1812.0], [38.0, 1806.0], [40.0, 1805.5], [43.0, 1796.0], [42.0, 1811.0], [45.0, 1798.0], [44.0, 1801.0], [47.0, 1786.0], [46.0, 1805.0], [49.0, 1787.0], [48.0, 1789.0], [51.0, 1777.0], [50.0, 1782.0], [53.0, 1768.0], [52.0, 1774.0], [55.0, 1773.0], [54.0, 1771.0], [56.0, 625.6666666666666], [57.0, 1770.0], [58.0, 910.5], [59.0, 911.0], [61.0, 911.0], [60.0, 1763.0], [63.0, 1761.0], [62.0, 1758.0], [65.0, 905.0], [67.0, 1748.0], [66.0, 1753.0], [64.0, 1756.0], [69.0, 623.6666666666666], [71.0, 1743.0], [70.0, 1743.0], [68.0, 1742.0], [75.0, 1733.0], [74.0, 1735.0], [73.0, 1735.0], [72.0, 1740.0], [76.0, 902.5], [77.0, 908.0], [79.0, 1726.0], [78.0, 1725.0], [83.0, 1722.0], [82.0, 1721.0], [81.0, 1725.0], [80.0, 1725.0], [87.0, 1716.0], [86.0, 1720.0], [84.0, 1722.0], [90.0, 629.0], [91.0, 895.5], [89.0, 1709.0], [88.0, 1707.0], [95.0, 1695.0], [94.0, 1702.0], [93.0, 1701.0], [92.0, 1695.0], [99.0, 1685.0], [98.0, 1689.0], [97.0, 1689.0], [96.0, 1691.0], [102.0, 894.0], [103.0, 1684.0], [101.0, 1685.0], [100.0, 1684.0], [107.0, 1677.0], [105.0, 1678.0], [104.0, 1681.0], [111.0, 886.5], [110.0, 1668.0], [109.0, 1669.0], [108.0, 1674.0], [115.0, 626.3333333333334], [114.0, 1661.0], [113.0, 1662.0], [112.0, 1665.0], [119.0, 1654.0], [118.0, 1661.0], [117.0, 1655.0], [116.0, 1659.0], [122.0, 1643.0], [121.0, 1646.0], [120.0, 1650.0], [127.0, 1634.0], [126.0, 1640.0], [125.0, 1647.0], [124.0, 1643.0], [128.0, 884.5], [129.0, 883.5], [135.0, 1620.0], [134.0, 1620.0], [133.0, 1626.0], [132.0, 1626.0], [131.0, 1627.0], [130.0, 1635.0], [139.0, 875.0], [142.0, 868.0], [143.0, 1600.0], [141.0, 1613.0], [140.0, 1609.0], [138.0, 1618.5], [136.0, 1619.0], [144.0, 879.5], [146.0, 628.6666666666667], [147.0, 872.5], [151.0, 1586.0], [150.0, 1594.0], [149.0, 1593.0], [148.0, 1601.0], [145.0, 1600.0], [156.0, 872.0], [159.0, 1574.0], [158.0, 1576.0], [157.0, 1579.0], [155.0, 1581.0], [154.0, 1582.0], [153.0, 1590.0], [152.0, 1585.0], [160.0, 864.5], [165.0, 864.0], [167.0, 1576.0], [166.0, 1565.0], [164.0, 1564.0], [163.0, 1569.0], [162.0, 1575.0], [161.0, 1573.0], [172.0, 628.3333333333333], [175.0, 1553.0], [174.0, 1546.0], [173.0, 1544.0], [171.0, 1549.0], [170.0, 1553.0], [169.0, 1558.0], [168.0, 1567.0], [176.0, 624.0], [177.0, 847.0], [180.0, 1084.0], [183.0, 1536.0], [182.0, 1541.0], [181.0, 1552.0], [178.0, 1557.0], [191.0, 1513.0], [190.0, 1516.0], [189.0, 1520.0], [188.0, 1513.0], [187.0, 1525.0], [186.0, 1514.0], [185.0, 1531.0], [184.0, 1533.0], [196.0, 828.0], [199.0, 1494.0], [198.0, 1498.0], [197.0, 1497.0], [195.0, 1502.0], [194.0, 1504.0], [193.0, 1510.0], [192.0, 1510.0], [207.0, 1470.0], [206.0, 1474.0], [205.0, 1477.0], [204.0, 1478.0], [203.0, 1473.0], [202.0, 1487.0], [201.0, 1483.0], [200.0, 1491.0], [208.0, 828.0], [215.0, 1444.0], [214.0, 1449.0], [213.0, 1450.0], [212.0, 1451.0], [211.0, 1456.0], [210.0, 1450.0], [209.0, 1462.0], [216.0, 831.0], [223.0, 229.0], [220.0, 1430.0], [219.0, 1433.0], [218.0, 1436.0], [217.0, 1439.0], [227.0, 614.6666666666667], [228.0, 614.3333333333333], [231.0, 1400.0], [230.0, 1404.0], [229.0, 1407.0], [226.0, 1415.0], [225.0, 1418.0], [224.0, 1421.0], [237.0, 804.5], [238.0, 1378.0], [236.0, 1389.0], [235.0, 1391.0], [234.0, 1394.0], [233.0, 1396.0], [232.0, 1400.0], [241.0, 833.5], [243.0, 829.5], [247.0, 1413.0], [246.0, 1407.0], [245.0, 1421.0], [244.0, 1415.0], [242.0, 1431.0], [240.0, 1407.5], [255.0, 1392.0], [254.0, 1391.0], [253.0, 1399.0], [252.0, 1392.0], [251.0, 1396.0], [250.0, 1397.0], [249.0, 1397.0], [248.0, 1410.0], [271.0, 1375.0], [258.0, 541.5], [263.0, 1379.0], [257.0, 1392.0], [256.0, 1395.0], [262.0, 1383.0], [261.0, 1383.0], [260.0, 1386.0], [264.0, 823.5], [270.0, 1370.0], [269.0, 1373.0], [268.0, 1372.0], [259.0, 1393.0], [267.0, 1381.0], [266.0, 1380.0], [265.0, 1379.0], [285.0, 640.3333333333333], [273.0, 643.3333333333333], [272.0, 1364.0], [279.0, 1355.0], [278.0, 1370.0], [277.0, 1360.0], [276.0, 1360.0], [274.0, 280.0], [275.0, 1005.6666666666666], [287.0, 1336.0], [286.0, 1343.0], [284.0, 1348.0], [283.0, 1353.0], [282.0, 1351.0], [281.0, 1353.0], [280.0, 1356.0], [302.0, 1319.0], [296.0, 812.5], [288.0, 820.0], [289.0, 1337.0], [291.0, 1333.0], [290.0, 1335.0], [295.0, 1329.0], [294.0, 1331.0], [293.0, 1330.0], [292.0, 1334.0], [299.0, 809.5], [303.0, 810.5], [301.0, 1318.0], [300.0, 1322.0], [298.0, 1323.0], [297.0, 1324.0], [318.0, 1301.0], [309.0, 812.5], [308.0, 1309.0], [310.0, 1304.0], [311.0, 647.0], [319.0, 807.5], [317.0, 1295.0], [316.0, 1295.0], [307.0, 1309.0], [306.0, 1316.0], [305.0, 1315.0], [304.0, 1315.0], [315.0, 1301.0], [314.0, 1299.0], [313.0, 1301.0], [312.0, 1304.0], [335.0, 1269.0], [327.0, 802.0], [326.0, 1281.0], [325.0, 1280.0], [324.0, 1283.0], [330.0, 809.0], [334.0, 1264.0], [333.0, 1271.0], [332.0, 1270.0], [323.0, 1282.0], [322.0, 1290.0], [321.0, 1289.0], [320.0, 1287.0], [331.0, 1271.0], [329.0, 1284.0], [328.0, 1280.0], [351.0, 1240.0], [339.0, 525.2], [341.0, 703.4], [343.0, 1253.0], [336.0, 1268.0], [338.0, 1258.0], [337.0, 1261.0], [342.0, 1256.0], [344.0, 342.0], [345.0, 1252.5], [348.0, 581.75], [350.0, 1246.0], [349.0, 1244.0], [347.0, 1243.0], [346.0, 1252.0], [367.0, 784.5], [360.0, 648.3333333333333], [365.0, 647.3333333333333], [366.0, 1210.0], [364.0, 1216.0], [355.0, 1234.0], [354.0, 1236.0], [353.0, 1238.0], [352.0, 1238.0], [363.0, 1233.0], [362.0, 1227.0], [361.0, 1223.0], [359.0, 1230.0], [358.0, 1231.0], [357.0, 1229.0], [356.0, 1233.0], [381.0, 780.0], [369.0, 368.0], [376.0, 650.0], [383.0, 1180.0], [382.0, 1194.0], [380.0, 1187.0], [370.0, 1216.0], [379.0, 1200.5], [377.0, 1205.0], [375.0, 1196.0], [368.0, 1209.0], [374.0, 1200.0], [373.0, 1202.0], [372.0, 1217.5], [398.0, 1170.0], [385.0, 580.25], [384.0, 1184.0], [391.0, 1178.0], [390.0, 1181.0], [389.0, 1178.0], [388.0, 1180.0], [387.0, 915.0], [399.0, 1165.0], [397.0, 1171.0], [396.0, 1169.0], [395.0, 1171.0], [394.0, 1173.0], [393.0, 1175.0], [392.0, 1175.0], [413.0, 780.0], [401.0, 778.5], [402.0, 589.25], [412.0, 1154.0], [400.0, 584.25], [404.0, 407.0], [407.0, 409.0], [410.0, 1080.111111111111], [411.0, 1151.0], [415.0, 1142.0], [414.0, 1146.0], [429.0, 772.5], [416.0, 775.5], [419.0, 406.0], [423.0, 596.25], [422.0, 1127.0], [421.0, 1133.0], [420.0, 1138.25], [431.0, 1119.0], [430.0, 1117.0], [428.0, 1126.0], [427.0, 1122.0], [426.0, 1133.0], [425.0, 1127.0], [424.0, 1128.0], [444.0, 769.0], [433.0, 434.5], [435.0, 1111.0], [434.0, 1121.0], [439.0, 1107.0], [432.0, 1115.0], [437.0, 763.5], [436.0, 1109.0], [438.0, 663.0], [440.0, 769.5], [441.0, 783.0], [443.0, 1102.0], [442.0, 1101.0], [446.0, 661.0], [447.0, 1094.0], [445.0, 1101.0], [461.0, 761.0], [448.0, 783.0], [451.0, 762.5], [450.0, 1092.0], [449.0, 1085.0], [455.0, 609.0], [454.0, 1080.0], [453.0, 1085.0], [452.0, 1083.0], [456.0, 770.5], [457.0, 1076.0], [463.0, 1070.0], [462.0, 1068.0], [460.0, 1073.0], [459.0, 1071.0], [458.0, 1075.0], [476.0, 750.0], [467.0, 589.6], [466.0, 1057.0], [465.0, 1070.0], [464.0, 1063.0], [468.0, 763.0], [470.0, 1061.0], [469.0, 1058.0], [471.0, 750.5], [477.0, 747.5], [478.0, 1047.0], [475.0, 1046.0], [474.0, 1053.0], [473.0, 1052.5], [494.0, 1019.0], [482.0, 651.0], [485.0, 655.0], [484.0, 1031.0], [487.0, 1025.0], [481.0, 1034.0], [480.0, 1051.0], [486.0, 1024.0], [488.0, 748.0], [491.0, 747.5], [495.0, 749.5], [493.0, 1025.0], [492.0, 1023.0], [483.0, 1034.0], [490.0, 1023.0], [489.0, 1025.0], [509.0, 994.0], [502.0, 490.0], [499.0, 660.6666666666666], [503.0, 1008.0], [496.0, 1021.0], [498.0, 1011.0], [497.0, 1016.0], [500.0, 753.5], [501.0, 748.0], [510.0, 1013.0], [505.0, 1007.0], [504.0, 1002.0], [508.0, 1009.0], [507.0, 1000.0], [506.0, 999.0], [519.0, 743.5], [514.0, 756.0], [515.0, 745.0], [516.0, 983.0], [512.0, 706.0], [517.0, 668.0], [518.0, 765.0], [528.0, 748.5], [529.0, 972.0], [543.0, 947.0], [542.0, 954.0], [541.0, 947.0], [540.0, 952.0], [538.0, 743.5], [537.0, 966.0], [536.0, 963.0], [539.0, 743.5], [530.0, 744.5], [532.0, 748.5], [531.0, 967.0], [533.0, 739.0], [534.0, 666.0], [535.0, 975.0], [520.0, 742.5], [522.0, 986.0], [521.0, 976.0], [524.0, 976.0], [523.0, 982.0], [525.0, 666.3333333333334], [527.0, 667.6666666666666], [526.0, 969.0], [572.0, 828.5], [556.0, 757.0], [552.0, 752.5], [555.0, 616.5], [554.0, 935.0], [553.0, 689.0], [551.0, 689.3333333333334], [558.0, 739.5], [557.0, 937.0], [559.0, 934.0], [544.0, 949.0], [546.0, 945.0], [545.0, 954.0], [548.0, 947.0], [547.0, 947.0], [550.0, 946.0], [549.0, 943.0], [561.0, 686.0], [562.0, 685.3333333333334], [563.0, 916.0], [565.0, 916.0], [564.0, 915.0], [567.0, 913.0], [566.0, 913.0], [568.0, 745.5], [569.0, 905.0], [573.0, 608.6153846153846], [575.0, 753.0], [560.0, 924.0], [574.0, 898.0], [602.0, 737.5], [577.0, 739.0], [576.0, 753.5], [578.0, 745.0], [579.0, 902.0], [581.0, 601.0], [582.0, 830.25], [583.0, 909.0], [601.0, 883.0], [600.0, 875.0], [586.0, 707.6666666666666], [585.0, 891.0], [584.0, 889.0], [589.0, 882.5], [587.0, 884.0], [590.0, 736.5], [591.0, 741.0], [599.0, 733.0], [598.0, 871.0], [597.0, 874.0], [596.0, 885.0], [595.0, 876.0], [594.0, 881.0], [593.0, 893.0], [592.0, 883.0], [607.0, 864.0], [606.0, 883.0], [605.0, 881.0], [604.0, 873.0], [603.0, 869.0], [611.0, 743.0], [609.0, 600.0], [608.0, 732.5], [610.0, 733.75], [620.0, 737.0], [619.0, 854.0], [617.0, 861.0], [616.0, 859.5], [622.0, 848.0], [621.0, 854.0], [623.0, 851.0], [626.0, 744.0], [638.0, 834.0], [624.0, 846.0], [625.0, 850.0], [634.0, 733.0], [633.0, 839.5], [614.0, 867.0], [636.0, 837.0], [635.0, 831.0], [637.0, 731.5], [628.0, 740.0], [627.0, 746.0], [629.0, 732.0], [631.0, 841.0], [630.0, 843.0], [641.0, 732.5], [640.0, 716.4], [643.0, 730.5], [642.0, 829.0], [644.0, 733.0], [651.0, 701.0], [650.0, 704.3333333333334], [649.0, 819.0], [648.0, 817.0], [653.0, 655.0], [652.0, 810.0], [654.0, 809.5], [655.0, 809.0], [661.0, 660.0], [663.0, 803.8], [671.0, 667.0], [656.0, 807.0], [658.0, 807.0], [657.0, 809.0], [664.0, 727.5], [647.0, 815.0], [646.0, 820.0], [645.0, 819.0], [667.0, 730.0], [685.0, 725.0], [679.0, 730.0], [687.0, 770.5], [676.0, 799.5454545454546], [678.0, 780.0], [677.0, 781.0], [698.0, 765.0], [699.0, 722.5], [702.0, 696.0], [703.0, 755.5], [683.0, 691.375], [681.0, 727.5], [680.0, 778.0], [682.0, 793.0], [684.0, 719.6666666666666], [689.0, 725.5], [688.0, 733.5], [690.0, 723.0], [692.0, 685.0], [691.0, 760.0], [693.0, 766.5], [694.0, 694.0], [695.0, 738.6666666666666], [707.0, 702.0], [704.0, 709.0], [706.0, 762.0], [705.0, 754.5], [708.0, 708.0], [709.0, 734.0], [717.0, 721.0], [716.0, 713.0], [715.0, 733.0], [714.0, 729.0], [713.0, 739.0], [712.0, 737.0], [718.0, 713.0], [720.0, 728.0], [711.0, 748.0], [710.0, 756.0], [722.0, 731.0], [721.0, 730.0], [724.0, 725.0], [723.0, 722.0], [1.0, 1875.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[386.9359999999995, 1027.6319999999996]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 724.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 6423.266666666666, "minX": 1.72708368E12, "maxY": 8821.633333333333, "series": [{"data": [[1.72708368E12, 8821.633333333333], [1.72708374E12, 7545.033333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72708368E12, 7510.066666666667], [1.72708374E12, 6423.266666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72708374E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 664.9406307977735, "minX": 1.72708368E12, "maxY": 1451.6898047722348, "series": [{"data": [[1.72708368E12, 664.9406307977735], [1.72708374E12, 1451.6898047722348]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72708374E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 664.9220779220783, "minX": 1.72708368E12, "maxY": 1451.6832971800427, "series": [{"data": [[1.72708368E12, 664.9220779220783], [1.72708374E12, 1451.6832971800427]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72708374E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 11.665943600867678, "minX": 1.72708368E12, "maxY": 11.738404452690174, "series": [{"data": [[1.72708368E12, 11.738404452690174], [1.72708374E12, 11.665943600867678]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72708374E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 23.0, "minX": 1.72708368E12, "maxY": 1875.0, "series": [{"data": [[1.72708368E12, 1070.0], [1.72708374E12, 1875.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72708368E12, 23.0], [1.72708374E12, 1069.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72708368E12, 991.0], [1.72708374E12, 1794.6000000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72708368E12, 1061.0], [1.72708374E12, 1867.1399999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72708368E12, 712.0], [1.72708374E12, 1415.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.72708368E12, 1025.0], [1.72708374E12, 1832.6]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72708374E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 328.5, "minX": 93.0, "maxY": 1789.0, "series": [{"data": [[134.0, 328.5], [368.0, 1360.0], [93.0, 1789.0], [405.0, 803.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 405.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 328.5, "minX": 93.0, "maxY": 1789.0, "series": [{"data": [[134.0, 328.5], [368.0, 1360.0], [93.0, 1789.0], [405.0, 803.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 405.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.72708368E12, "maxY": 16.666666666666668, "series": [{"data": [[1.72708368E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72708368E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 7.683333333333334, "minX": 1.72708368E12, "maxY": 8.983333333333333, "series": [{"data": [[1.72708368E12, 8.983333333333333], [1.72708374E12, 7.683333333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72708374E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 7.683333333333334, "minX": 1.72708368E12, "maxY": 8.983333333333333, "series": [{"data": [[1.72708368E12, 8.983333333333333], [1.72708374E12, 7.683333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72708374E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 7.683333333333334, "minX": 1.72708368E12, "maxY": 8.983333333333333, "series": [{"data": [[1.72708368E12, 8.983333333333333], [1.72708374E12, 7.683333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72708374E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

